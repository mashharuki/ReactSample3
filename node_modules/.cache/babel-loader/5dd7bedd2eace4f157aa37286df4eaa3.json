{"ast":null,"code":"import _slicedToArray from \"/Users/harukikondo/git/ReactSample3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/harukikondo/git/ReactSample3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/harukikondo/git/ReactSample3/src/App.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/**\n * メインコンポーネント\n */\nimport React, { memo, useState, useEffect, useMemo } from \"react\";\nimport \"./styles.css\";\n/**\n * 長方形の面積を求めるsquareコンポーネント\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar square = function square(params) {\n  // 配列を生成\n  var testArea = _toConsumableArray(Array(1000).keys()); // 重い処理(テスト用)\n\n\n  testArea.forEach(function () {\n    console.log(\"\\u300C\\u8A08\\u7B97B+1\\u300D\\u304C\\u30DC\\u30BF\\u30F3\\u30AF\\u30EA\\u30C3\\u30AF\\u3055\\u308C\\u3001squre\\u95A2\\u6570\\u5B9F\\u884C\\u4E2D, \\u30EB\\u30FC\\u30D7\\u51E6\\u7406\\u3092\".concat(testArea.length, \"\\u56DE\\u5B9F\\u884C\\u4E2D\"));\n  }); // 面積を計算\n\n  return params * params;\n};\n/**\n * Counterコンポーネント\n */\n\n\nvar Counter = function Counter() {\n  _s();\n\n  // ステート変数\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      countStateA = _useState2[0],\n      setCountStateA = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countStateB = _useState4[0],\n      setCountStateB = _useState4[1];\n  /**\n   * カウントアップする関数\n   */\n\n\n  var countResultA = function countResultA() {\n    setCountStateA(function (prevCountA) {\n      return prevCountA + 1;\n    });\n    console.log(\"計算：A+1ボタンがクリックされました。\");\n  };\n\n  var countResultB = function countResultB() {\n    setCountStateB(function (prevCountB) {\n      return prevCountB + 1;\n    });\n    console.log(\"計算：B+1ボタンがクリックされました。\");\n  }; // 面積を求める。\n\n\n  var squareArea = useMemo(function () {\n    return square(countStateB);\n  }, [countStateB]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: countResultA,\n        children: \"\\u8A08\\u7B97\\uFF1AA + 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: countResultB,\n        children: \"\\u8A08\\u7B97\\uFF1AB + 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u3010\\u6B63\\u65B9\\u5F62\\u306E\\u9762\\u7A4D\\u3011\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u8A08\\u7B97\\u7D50\\u679CB  * \\u8A08\\u7B97\\u7D50\\u679CB = \", squareArea]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 8\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Counter, \"pH8Omcp1Q9/0ZycShnWeXFH0ZB0=\");\n\n_c = Counter;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 11\n  }, this);\n}\n_c2 = App;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Counter\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/harukikondo/git/ReactSample3/src/App.js"],"names":["React","memo","useState","useEffect","useMemo","square","params","testArea","Array","keys","forEach","console","log","length","Counter","countStateA","setCountStateA","countStateB","setCountStateB","countResultA","prevCountA","countResultB","prevCountB","squareArea","App"],"mappings":";;;;;;;AAAA;AACA;AACA;AACC,OAAOA,KAAP,IAAeC,IAAf,EAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,OAA1C,QAAyD,OAAzD;AACA,OAAO,cAAP;AAEA;AACD;AACA;;;;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAY;AACzB;AACA,MAAMC,QAAQ,sBAAOC,KAAK,CAAC,IAAD,CAAL,CAAYC,IAAZ,EAAP,CAAd,CAFyB,CAGzB;;;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,YAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,iLAAmDL,QAAQ,CAACM,MAA5D;AACD,GAFD,EAJyB,CAOzB;;AACA,SAAOP,MAAM,GAAGA,MAAhB;AACD,CATD;AAWC;AACD;AACA;;;AACA,IAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AACnB;AACA,kBAAsCZ,QAAQ,CAAC,CAAD,CAA9C;AAAA;AAAA,MAAOa,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAsCd,QAAQ,CAAC,CAAD,CAA9C;AAAA;AAAA,MAAOe,WAAP;AAAA,MAAoBC,cAApB;AAEA;AACH;AACA;;;AACG,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC1BH,IAAAA,cAAc,CAAC,UAACI,UAAD;AAAA,aAAgBA,UAAU,GAAG,CAA7B;AAAA,KAAD,CAAd;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,GAHD;;AAKA,MAAMS,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC1BH,IAAAA,cAAc,CAAC,UAACI,UAAD;AAAA,aAAgBA,UAAU,GAAG,CAA7B;AAAA,KAAD,CAAd;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,GAHD,CAbmB,CAkBnB;;;AACA,MAAMW,UAAU,GAAGnB,OAAO,CAAC;AAAA,WAAMC,MAAM,CAACY,WAAD,CAAZ;AAAA,GAAD,EAA4B,CAACA,WAAD,CAA5B,CAA1B;AAEA,sBACE;AAAA,4BACE;AAAA,6BAAG;AAAQ,QAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA,6BAAG;AAAQ,QAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,eAIE;AAAA,8EAAqBE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF;AAAA,kBADF;AAQD,CA7BF;;GAAMT,O;;KAAAA,O;AA+BL,eAAe,SAASU,GAAT,GAAe;AAC5B,sBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;MAFuBA,G;AAEvB","sourcesContent":["/**\n * メインコンポーネント\n */\n import React,{ memo, useState, useEffect, useMemo } from \"react\";\n import \"./styles.css\";\n \n /**\n  * 長方形の面積を求めるsquareコンポーネント\n  */\nconst square = (params) => {\n  // 配列を生成\n  const testArea = [...Array(1000).keys()];\n  // 重い処理(テスト用)\n  testArea.forEach(() => {\n    console.log(`「計算B+1」がボタンクリックされ、squre関数実行中, ループ処理を${testArea.length}回実行中`);\n  });\n  // 面積を計算\n  return params * params;\n};\n \n /**\n  * Counterコンポーネント\n  */\nconst Counter = () => {\n   // ステート変数\n   const [countStateA, setCountStateA] = useState(0);\n   const [countStateB, setCountStateB] = useState(0);\n\n   /**\n    * カウントアップする関数\n    */\n   const countResultA = () => {\n    setCountStateA((prevCountA) => prevCountA + 1);\n    console.log(\"計算：A+1ボタンがクリックされました。\");\n   };\n\n   const countResultB = () => {\n    setCountStateB((prevCountB) => prevCountB + 1);\n    console.log(\"計算：B+1ボタンがクリックされました。\");\n   };\n \n   // 面積を求める。\n   const squareArea = useMemo(() => square(countStateB), [countStateB]);\n\n   return (\n     <>\n       <p><button onClick={countResultA}>計算：A + 1</button></p>\n       <p><button onClick={countResultB}>計算：B + 1</button></p>\n       <p>【正方形の面積】</p>\n       <p>計算結果B  * 計算結果B = {squareArea}</p>\n     </>\n   );\n }\n \n export default function App() {\n   return <Counter />;\n };\n "]},"metadata":{},"sourceType":"module"}